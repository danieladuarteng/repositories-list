{"version":3,"sources":["store/ducks/repositories/types.ts","store/ducks/repositories/actions.ts","components/RepositoryItem/index.tsx","components/RespositoryList/index.tsx","store/ducks/repositories/index.ts","store/ducks/rootReducer.ts","services/api.ts","store/ducks/repositories/saga.ts","store/ducks/rootSaga.ts","store/index.ts","App.tsx","index.tsx"],"names":["RepositoriesTypes","loadRequest","action","LOAD_REQUEST","loadSuccess","data","LOAD_SUCCESS","loadFailure","LOAD_FAILURE","RepositoryItem","props","repository","name","RepositoryList","this","repositories","map","key","id","Component","connect","state","dispatch","bindActionCreators","RepositoriesActions","INITIAL_STATE","error","loading","reducer","type","payload","combineReducers","api","axios","create","baseURL","load","call","get","response","put","rootSaga","all","takeLatest","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","run","App","RespositoryList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gUAKYA,E,kGAAAA,K,0CAAAA,E,0CAAAA,E,2CAAAA,M,KCFL,IAAMC,EAAc,kBAAMC,iBAAOF,EAAkBG,eAE7CC,EAAc,SAACC,GAAD,OACzBH,iBAAOF,EAAkBM,aAAc,CAAED,UAE9BE,EAAc,kBAAML,iBAAOF,EAAkBQ,eCD3C,SAASC,EAAeC,GAAkB,IAC/CC,EAAeD,EAAfC,WACR,OAAO,4BAAKA,EAAWC,M,ICcnBC,E,mLAIFZ,EAFwBa,KAAKJ,MAArBT,iB,+BAKA,IACAc,EAAiBD,KAAKJ,MAAtBK,aACR,OACE,4BACGA,EAAaC,KAAI,SAACL,GAAD,OAChB,kBAACF,EAAD,CAAgBQ,IAAKN,EAAWO,GAAIP,WAAYA,Y,GAZ7BQ,aA0BdC,eAPS,SAACC,GAAD,MAA8B,CACpDN,aAAcM,EAAMN,aAAaV,SAGR,SAACiB,GAAD,OACzBC,YAAmBC,EAAqBF,KAE3BF,CAA6CP,G,eC9CtDY,EAAmC,CACvCpB,KAAM,GACNqB,OAAO,EACPC,SAAS,GA6BIC,EA1B6B,WAAmC,IAAlCP,EAAiC,uDAAzBI,EAAevB,EAAU,uCAC5E,OAAQA,EAAO2B,MACb,KAAK7B,EAAkBG,aACrB,OAAO,2BACFkB,GADL,IAEEM,SAAS,IAEb,KAAK3B,EAAkBM,aACrB,OAAO,2BACFe,GADL,IAEEM,SAAS,EACTD,OAAO,EACPrB,KAAMH,EAAO4B,QAAQzB,OAEzB,KAAKL,EAAkBQ,aACrB,OAAO,2BACFa,GADL,IAEEM,SAAS,EACTD,OAAO,EACPrB,KAAM,KAEV,QACE,OAAOgB,IC5BEU,cAAgB,CAAEhB,iB,gCCGlBiB,E,OAJHC,EAAMC,OAAO,CACvBC,QAAS,4B,WCCMC,GAAV,SAAUA,IAAV,uEAEc,OAFd,kBAEoBC,YAAKL,EAAIM,IAAK,+BAFlC,OAGH,OADMC,EAFH,gBAGGC,YAAIpC,EAAYmC,EAASlC,OAH5B,8BAKH,OALG,mCAKGmC,YAAIjC,KALP,qDASQ6B,I,WCTUK,GAAV,SAAUA,IAAV,iEACN,OADM,SACAC,YAAI,CAACC,YAAW3C,EAAkBG,aAAciC,KADhD,+ECMf,IAAMQ,EAAiBC,cAEjBC,EAAiCC,YACrCC,EACAC,YAAgBL,IAGlBA,EAAeM,IAAIT,GAEJK,QCRAK,EANH,kBACV,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAACM,EAAD,QCHJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.4a318b5b.chunk.js","sourcesContent":["/**\r\n * Actions types\r\n */\r\n\r\n// ao invés de const usamos enum para facilitar o intelisense da IDE\r\nexport enum RepositoriesTypes {\r\n  LOAD_REQUEST = \"@repositories/LOAD_REQUEST\",\r\n  LOAD_SUCCESS = \"@repositories/LOAD_SUCCESS\",\r\n  LOAD_FAILURE = \"@repositories/LOAD_FAILURE\",\r\n}\r\n\r\n/**\r\n * Data types (formats)\r\n */\r\nexport interface Repository {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\n/**\r\n * State type\r\n */\r\nexport interface RepositoriesState {\r\n  readonly data: Repository[]; // readonly para ser imutável\r\n  readonly loading: boolean;\r\n  readonly error: boolean;\r\n}\r\n","import { action } from \"typesafe-actions\";\r\nimport { RepositoriesTypes, Repository } from \"./types\";\r\n\r\nexport const loadRequest = () => action(RepositoriesTypes.LOAD_REQUEST);\r\n\r\nexport const loadSuccess = (data: Repository[]) =>\r\n  action(RepositoriesTypes.LOAD_SUCCESS, { data });\r\n\r\nexport const loadFailure = () => action(RepositoriesTypes.LOAD_FAILURE);\r\n","import React from \"react\";\r\nimport { Repository } from \"../../store/ducks/repositories/types\";\r\n\r\ninterface OwnProps {\r\n  repository: Repository;\r\n}\r\n\r\nexport default function RepositoryItem(props: OwnProps) {\r\n  const { repository } = props;\r\n  return <li>{repository.name}</li>;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators, Dispatch } from \"redux\";\r\nimport { Repository } from \"../../store/ducks/repositories/types\";\r\nimport * as RepositoriesActions from \"../../store/ducks/repositories/actions\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport RepositoryItem from \"../RepositoryItem\";\r\n\r\n// mapear tipos os tipos de informação que vem do mapStateToProps\r\ninterface StateProps {\r\n  repositories: Repository[];\r\n}\r\n\r\n// mapear funções que vem do mapDispatchToProps\r\ninterface DispatchProps {\r\n  loadRequest(): void;\r\n}\r\n\r\n// propriedades que vem de componentes pais\r\n// interface OwnProps {}\r\n\r\ntype Props = StateProps & DispatchProps; // & OwnProps;\r\n\r\nclass RepositoryList extends Component<Props> {\r\n  componentDidMount() {\r\n    const { loadRequest } = this.props;\r\n\r\n    loadRequest();\r\n  }\r\n\r\n  render() {\r\n    const { repositories } = this.props;\r\n    return (\r\n      <ul>\r\n        {repositories.map((repository) => (\r\n          <RepositoryItem key={repository.id} repository={repository} />\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: ApplicationState) => ({\r\n  repositories: state.repositories.data,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) =>\r\n  bindActionCreators(RepositoriesActions, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RepositoryList);\r\n","import { Reducer } from \"redux\";\r\nimport { RepositoriesState, RepositoriesTypes } from \"./types\"\r\n\r\nconst INITIAL_STATE: RepositoriesState = {\r\n  data: [],\r\n  error: false,\r\n  loading: false,\r\n};\r\n\r\nconst reducer: Reducer<RepositoriesState> = (state = INITIAL_STATE, action) =>{\r\n  switch (action.type) {\r\n    case RepositoriesTypes.LOAD_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case RepositoriesTypes.LOAD_SUCCESS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: false,\r\n        data: action.payload.data,\r\n      };\r\n    case RepositoriesTypes.LOAD_FAILURE:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: true,\r\n        data: [],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\nimport repositories from \"./repositories\";\r\n\r\nexport default combineReducers({ repositories });\r\n","import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL: \"https://api.github.com/\",\r\n});\r\n\r\nexport default api;\r\n","import { call, put } from \"redux-saga/effects\";\r\nimport api from \"../../../services/api\";\r\nimport { loadSuccess, loadFailure } from \"./actions\";\r\n\r\nexport function* load() {\r\n  try {\r\n    const response = yield call(api.get, \"users/danieladuarteng/repos\");\r\n    yield put(loadSuccess(response.data));\r\n  } catch (error) {\r\n    yield put(loadFailure());\r\n  }\r\n}\r\n\r\nexport default load;\r\n","import { all, takeLatest } from \"redux-saga/effects\";\r\nimport { RepositoriesTypes } from \"./repositories/types\";\r\nimport { load } from \"./repositories/saga\";\r\n\r\nexport default function* rootSaga() {\r\n  return yield all([takeLatest(RepositoriesTypes.LOAD_REQUEST, load)]);\r\n}\r\n","import { createStore, applyMiddleware, Store } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { RepositoriesState } from \"./ducks/repositories/types\";\r\nimport rootReducer from \"./ducks/rootReducer\";\r\nimport rootSaga from \"./ducks/rootSaga\";\r\n\r\nexport interface ApplicationState {\r\n  repositories: RepositoriesState;\r\n}\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store: Store<ApplicationState> = createStore(\r\n  rootReducer,\r\n  applyMiddleware(sagaMiddleware)\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport RespositoryList from \"./components/RespositoryList\";\nimport store from \"./store\";\n\nconst App = () => (\n  <Provider store={store}>\n    <RespositoryList />\n  </Provider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}